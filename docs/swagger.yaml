definitions:
  dtos.ChatRoomRequest:
    properties:
      image_url:
        example: https://example.com/profile_picture.jpg
        type: string
      name:
        example: My Group Chat
        type: string
      participant_ids:
        items:
          type: string
        type: array
      type:
        allOf:
        - $ref: '#/definitions/models.ChatRoomType'
        example: group
    type: object
  dtos.ChatRoomResponse:
    properties:
      id:
        type: integer
      image_url:
        type: string
      name:
        type: string
      participants:
        items:
          $ref: '#/definitions/dtos.UserResponse'
        type: array
      type:
        type: string
    type: object
  dtos.MessageResponse:
    properties:
      content:
        type: string
      room_id:
        type: integer
      sender_id:
        type: string
      timestamp:
        type: string
    type: object
  dtos.UserResponse:
    properties:
      created_at:
        example: "1970-01-01T00:00:00Z"
        type: string
      id:
        example: "123"
        type: string
      image_url:
        example: https://example.com/profile_picture.jpg
        type: string
      is_online:
        example: true
        type: boolean
      username:
        example: john_doe
        type: string
    type: object
  models.ChatRoomType:
    enum:
    - dm
    - group
    type: string
    x-enum-varnames:
    - DirectMessageRoom
    - GroupChatRoom
  utils.ErrorResponse:
    properties:
      message:
        example: error message
        type: string
      success:
        example: false
        type: boolean
    type: object
  utils.Pagination:
    properties:
      data: {}
      page:
        example: 1
        type: integer
      page_size:
        example: 10
        type: integer
      total_pages:
        example: 10
        type: integer
      total_rows:
        example: 100
        type: integer
    type: object
  utils.SuccessResponse:
    properties:
      data: {}
      message:
        example: success
        type: string
      success:
        example: true
        type: boolean
    type: object
host: api.yapchat.xyz
info:
  contact: {}
  description: The official API for YapChat
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  title: YapChat API
  version: "1.0"
paths:
  /v1/chatrooms:
    get:
      description: Get a list of all chat rooms that the user is in
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.ChatRoomResponse'
                  type: array
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: List all chat rooms
      tags:
      - chatrooms
    post:
      consumes:
      - application/json
      description: Create a new chat room
      parameters:
      - description: Chat room info
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dtos.ChatRoomRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create a new chat room
      tags:
      - chatrooms
  /v1/chatrooms/{id}:
    get:
      description: Get chat room by ID
      parameters:
      - description: Chat room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.ChatRoomResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get chat room by ID
      tags:
      - chatrooms
  /v1/chatrooms/{id}/invite-code:
    get:
      description: Create and return an invite code for a chat room
      parameters:
      - description: Chat room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get an invite code for a chat room
      tags:
      - chatrooms
  /v1/chatrooms/{id}/join:
    post:
      description: Join chat room by ID
      parameters:
      - description: Chat room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/utils.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Join chat room by ID
      tags:
      - chatrooms
  /v1/chatrooms/{id}/leave:
    post:
      description: Leave chat room by ID
      parameters:
      - description: Chat room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Leave chat room by ID
      tags:
      - chatrooms
  /v1/chatrooms/{id}/messages:
    get:
      description: Get messages for a specific chat room
      parameters:
      - description: Chat room ID
        in: path
        name: id
        required: true
        type: integer
      - description: Page number (default 1)
        in: query
        name: page
        type: integer
      - description: Number of messages per page (default 25)
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.Pagination'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dtos.MessageResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get messages by chat room ID
      tags:
      - chatrooms
  /v1/users/{username}:
    get:
      description: Get details of a user using their username
      parameters:
      - description: Username of the user to retrieve
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile by username
      tags:
      - users
  /v1/users/me:
    get:
      description: Get details of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/utils.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/dtos.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - users
  /ws:
    get:
      description: Handles websocket connections for real-time communication.
      responses: {}
      summary: Handle websocket connection
      tags:
      - websocket
swagger: "2.0"
